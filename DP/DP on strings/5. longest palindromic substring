class Solution:
    def help(self,l:int,r:int,s:str,dp:List[List[int]])->int:
        if l>=r:
            return 1
        if dp[l][r]!=-1:
            return dp[l][r]
        if s[l]==s[r]:
            dp[l][r]=self.help(l+1,r-1,s,dp)
        else:
            dp[l][r]= False

        return dp[l][r]
        
    def longestPalindrome(self, s: str) -> str:
        dp=[[-1] * len(s) for _ in range(len(s))]
        max_len=float('-inf')
        si=0
        for i in range(len(s)):
            for j in range(len(s)):
                if self.help(i,j,s,dp):
                    if (j-i+1 >max_len):
                        si=i
                        max_len=j-i+1
        return s[si:si+max_len]

            

        
