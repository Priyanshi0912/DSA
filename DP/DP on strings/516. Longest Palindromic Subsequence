class Solution:
    def func(self,ind1,ind2,str1,str2,dp):
        if (ind1<0 or ind2<0):
            return 0
        if dp[ind1][ind2]!=-1:
            return dp[ind1][ind2]
        if str1[ind1]==str2[ind2]:
            dp[ind1][ind2]=1+ self.func(ind1-1,ind2-1,str1,str2,dp)
            return dp[ind1][ind2]
        else:
            dp[ind1][ind2]=max(self.func(ind1-1,ind2,str1,str2,dp),self.func(ind1,ind2-1,str1,str2,dp))
            return dp[ind1][ind2]
    def lcs(self,str1,str2):
        n=len(str1)
        m=len(str2)
        dp=[[-1 for i in range(m)] for j in range(n)]
        return self.func(n-1,m-1,str1,str2,dp)
    def longestPalindromeSubseq(self, s: str) -> int:
        n=len(s)
        #rs= reverse of s 
        rs=""
        for i in range(n-1,-1,-1):
            rs+=s[i]
        return self.lcs(s,rs)

        
